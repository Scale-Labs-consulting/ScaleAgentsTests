import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import OpenAI from 'openai'
import { extractTextFromURL } from '@/lib/pdf-utils'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_KEY
})

export async function POST(request: NextRequest) {
  try {
    const { candidateId, userId, accessToken } = await request.json()

    console.log('üß† Analyzing candidate:', candidateId)

    if (!candidateId || !userId || !accessToken) {
      return NextResponse.json(
        { error: 'Missing required parameters' },
        { status: 400 }
      )
    }

    // Create authenticated Supabase client
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        global: {
          headers: {
            Authorization: `Bearer ${accessToken}`
          }
        }
      }
    )

    // Get user from session
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    
    if (userError || !user || user.id !== userId) {
      return NextResponse.json(
        { error: 'Invalid session' },
        { status: 401 }
      )
    }

    // Fetch candidate data
    const { data: candidate, error: candidateError } = await supabase
      .from('hr_candidates')
      .select('*')
      .eq('id', candidateId)
      .eq('user_id', userId)
      .single()

    if (candidateError || !candidate) {
      console.error('‚ùå Candidate not found:', candidateError)
      return NextResponse.json(
        { error: 'Candidate not found' },
        { status: 404 }
      )
    }

    console.log('‚úÖ Candidate found:', candidate.name)

    // Update status to processing
    await supabase
      .from('hr_candidates')
      .update({ status: 'processing' })
      .eq('id', candidateId)

    try {
      // Truncate CV content to fit within token limits (roughly 3000 tokens for CV content)
      const maxCvLength = 12000 // ~3000 tokens (4 chars per token average)
      const cvContent = candidate.cv_content || 'CV content not available'
      const truncatedCvContent = cvContent.length > maxCvLength 
        ? cvContent.substring(0, maxCvLength) + '\n\n[CV content truncated due to length]'
        : cvContent

      console.log(`üìÑ CV content length: ${cvContent.length} chars, truncated to: ${truncatedCvContent.length} chars`)

      // Analyze CV using OpenAI with the new 3-prompt workflow
      
      // Build candidate information from form data and CV
      let candidateInfo = ''
      
      if (candidate.form_data) {
        const formData = candidate.form_data
        candidateInfo = `
Informa√ß√µes do Candidato:
- Nome: ${candidate.name}
- Email: ${candidate.email}
- Idade: ${formData.Idade || 'N√£o especificada'}
- Resid√™ncia: ${formData.Resid√™ncia || 'N√£o especificada'}
- Regime de trabalho pretendido: ${formData.Regime || 'N√£o especificado'}
- J√° fez vendas diretas: ${formData['J√° fizeste vendas diretas?'] || 'N√£o especificado'}
- Anos de experi√™ncia em vendas: ${formData['Se sim, quantos anos tens de experi√™ncia em vendas diretas?'] || '0'}
- Setores de experi√™ncia: ${formData['Setores em que tem experi√™ncia'] || 'N√£o especificado'}
- L√≠nguas faladas: ${formData['L√≠nguas faladas'] || 'N√£o especificado'}
- Confian√ßa na habilidade de vender (0-10): ${formData['De 0-10, o qu√£o confiante est√°s na tua habilidade de vendedor?'] || 'N√£o especificado'}
- Facilidade com feedback negativo (0-10): ${formData['De 0-10, o qu√£o f√°cil lidas com feedback negativo?'] || 'N√£o especificado'}
- Confian√ßa sob press√£o (0-10): ${formData['De 0-10, o qu√£o confiante trabalhas sob press√£o?'] || 'N√£o especificado'}
- Disponibilidade imediata: ${formData['Tens disponibilidade imediata?'] || 'N√£o especificado'}
`
      }

      // Prompt 1: Main scoring evaluation
      const prompt1 = `
Como assistente de recrutamento especializado, a tua fun√ß√£o √© avaliar candidatos para posi√ß√µes comerciais para empresas parceiras. 
Segue este processo estruturado de avalia√ß√£o:

CRIT√âRIOS ELIMINAT√ìRIOS Primeiro, verifique se o candidato atende aos requisitos m√≠nimos de cada empresa. Se qualquer crit√©rio eliminat√≥rio n√£o for atendido, atribua pontua√ß√£o 0 e encerre a avalia√ß√£o para aquela empresa.

Comopi:
Idade: 20-45 anos
Carta de condu√ß√£o obrigat√≥ria
Disponibilidade para desloca√ß√µes frequentes
Conhecimento em design e setor

MoBrand:
Ingl√™s fluente obrigat√≥rio
Experi√™ncia B2B comprovada
Disponibilidade hor√°rio 14:00-22:00 GMT
Documenta√ß√£o portuguesa regularizada

Lugotech:
Localiza√ß√£o: Guimar√£es ou arredores
Disponibilidade presencial segundas-feiras
Experi√™ncia em vendas ou call center

Grafislab:
Ingl√™s fluente
Franc√™s desej√°vel
Disponibilidade regime h√≠brido Ermesinde
Idade: 25-35 anos

Mariana Arga e Lima:
Experi√™ncia em vendas consultivas
Capacidade comprovada de gest√£o de ciclo comercial completo
Disponibilidade para trabalho remoto

Mush:
Idade: 23-38 anos
Forma√ß√£o ou experi√™ncia em Marketing
Localiza√ß√£o: Porto ou arredores
Disponibilidade regime h√≠brido

Slide Lab:
Idade: 22-33 anos
Experi√™ncia comercial pr√©via (2-3 anos)
Ingl√™s fluente
Localiza√ß√£o: Lisboa

Fashion Details:
Idade: <35 anos
Conhecimento setor moda
Carta de condu√ß√£o
Localiza√ß√£o: Trofa

MagikEvolution:
Idade: 22-30 anos
Localiza√ß√£o: Trofa/Maia/Santo Tirso/Vizela/Famalic√£o
Disponibilidade regime h√≠brido

Maria Costa e Maia:
Experi√™ncia m√≠nima 2 anos em vendas
Resid√™ncia Porto ou Lisboa
Disponibilidade regime h√≠brido
Capacidade gest√£o 10 reuni√µes/dia

SISTEMA DE PONTUA√á√ÉO (Para candidatos que passaram os crit√©rios eliminat√≥rios)
C√ÅLCULO DA PONTUA√á√ÉO FINAL:
Para cada empresa, calcular:

M√©dia ponderada dos crit√©rios com os seguintes pesos:
Experi√™ncia em Vendas: 35%
Localiza√ß√£o e Disponibilidade: 25%
Compet√™ncias Lingu√≠sticas: 20%
Soft Skills: 10%
Expectativa Salarial: 10%

Multiplicar por fatores espec√≠ficos apenas se todos os requisitos m√≠nimos forem atendidos:
Match de setor de interesse: x1.1
Match de regime de trabalho: x1.1
Match geogr√°fico perfeito: x1.1

Se o candidato tiver 0 anos de experi√™ncia, a pontua√ß√£o final n√£o pode exceder 3.0.
Se o candidato tiver menos de 1 ano de experi√™ncia, a pontua√ß√£o final n√£o pode exceder 5.0.

Como output, dar um rating de 0-10, apenas o n√∫mero final.

FATORES MULTIPLICADORES Aplicar apenas se pontua√ß√£o base >5:
Match perfeito de setor: x1.2
Match perfeito de localiza√ß√£o: x1.1
Match perfeito de regime de trabalho: x1.1

LIMITADORES
0 anos de experi√™ncia: pontua√ß√£o m√°xima 3.0
Menos de 1 ano de experi√™ncia: pontua√ß√£o m√°xima 5.0
N√£o atendimento de qualquer crit√©rio eliminat√≥rio: pontua√ß√£o 0

OUTPUT Fornecer:
Pontua√ß√£o final (0-10, uma casa decimal)
As tr√™s empresas com maior pontua√ß√£o
Principais pontos fortes do candidato
Principais pontos de aten√ß√£o
Mesmo com informa√ß√µes incompletas, fornece sempre uma avalia√ß√£o baseada nos dados dispon√≠veis, indicando quais crit√©rios n√£o puderam ser avaliados

Eis o candidato que estamos a avaliar:

${candidateInfo}

CV Content:
${truncatedCvContent}

Analisa este candidato baseado nas informa√ß√µes do formul√°rio e conte√∫do do CV e retorna apenas um n√∫mero de 0-10 com uma casa decimal (ex: 7.5).
`

      // Execute the 3-prompt workflow
      
      // Prompt 1: Main scoring evaluation
      console.log('ü§ñ Executing Prompt 1: Main scoring evaluation...')
      const completion1 = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "√âs um especialista em recrutamento para posi√ß√µes comerciais. Avalias candidatos para 10 empresas parceiras seguindo crit√©rios espec√≠ficos. Retornas apenas um n√∫mero de 0-10."
          },
          {
            role: "user",
            content: prompt1
          }
        ],
        temperature: 0.1,
        max_tokens: 100
      })

      const scoreResponse = completion1.choices[0]?.message?.content
      if (!scoreResponse) {
        throw new Error('No score response received from OpenAI')
      }

      // Extract score from response (should be just a number)
      const scoreMatch = scoreResponse.match(/(\d+\.?\d*)/)
      const score = scoreMatch ? parseFloat(scoreMatch[1]) : 5.0
      console.log(`üìä Score extracted: ${score}`)

      // Prompt 2: Strengths analysis
      console.log('ü§ñ Executing Prompt 2: Strengths analysis...')
      const prompt2 = `
Preciso que analises esta resposta "${scoreResponse}" e o candidato em questao e me digas em 15 palavras os pontos fortes dele.

3 no m√°ximo.

Output s√≥ os pontes fortes.
`
      
      const completion2 = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "√âs um especialista em an√°lise de candidatos. Identificas pontos fortes de forma concisa."
          },
          {
            role: "user",
            content: prompt2
          }
        ],
        temperature: 0.3,
        max_tokens: 100
      })

      const strengthsResponse = completion2.choices[0]?.message?.content || 'Pontos fortes n√£o identificados'

      // Prompt 3: Weaknesses analysis
      console.log('ü§ñ Executing Prompt 3: Weaknesses analysis...')
      const prompt3 = `
Preciso que analises esta resposta "${scoreResponse}" e o candidato em questao e me digas em 15 palavras os pontos a ter em aten√ß√£o dele.

3 no m√°ximo.

Output s√≥ os pontes a ter em aten√ßao.
`
      
      const completion3 = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "√âs um especialista em an√°lise de candidatos. Identificas pontos de aten√ß√£o de forma concisa."
          },
          {
            role: "user",
            content: prompt3
          }
        ],
        temperature: 0.3,
        max_tokens: 100
      })

      const weaknessesResponse = completion3.choices[0]?.message?.content || 'Pontos de aten√ß√£o n√£o identificados'

      // Compile analysis results
      const analysis = {
        score: score,
        strengths: [strengthsResponse],
        weaknesses: [weaknessesResponse],
        fit: `Candidato avaliado com pontua√ß√£o ${score}/10`,
        recommendation: score >= 7 ? 'Recomendado' : score >= 5 ? 'Com reservas' : 'N√£o recomendado',
        interview_questions: ['Avalia√ß√£o baseada em crit√©rios espec√≠ficos das empresas parceiras'],
        raw_content: scoreResponse,
        prompt1_response: scoreResponse,
        prompt2_response: strengthsResponse,
        prompt3_response: weaknessesResponse
      }

      // Store analysis in database
      console.log('üíæ Storing analysis results...')
      const { error: updateError } = await supabase
        .from('hr_candidates')
        .update({
          status: 'completed',
          score: analysis.score || 0,
          analysis: analysis,
          analyzed_at: new Date().toISOString()
        })
        .eq('id', candidateId)

      if (updateError) {
        console.error('‚ùå Failed to update candidate analysis:', updateError)
        console.error('‚ùå Update data:', {
          status: 'completed',
          score: analysis.score || 0,
          analysis: analysis,
          analyzed_at: new Date().toISOString()
        })
        throw new Error(`Failed to store analysis results: ${updateError.message}`)
      }

      console.log('‚úÖ Analysis completed successfully for:', candidate.name)

      return NextResponse.json({
        success: true,
        candidateName: candidate.name,
        score: analysis.score || 0,
        analysis: analysis,
        message: 'Analysis completed successfully'
      })

    } catch (analysisError) {
      console.error('‚ùå Analysis failed:', analysisError)
      
      // Update status to failed
      await supabase
        .from('hr_candidates')
        .update({ 
          status: 'failed',
          analysis: { error: analysisError instanceof Error ? analysisError.message : 'Analysis failed' }
        })
        .eq('id', candidateId)

      throw analysisError
    }

  } catch (error) {
    console.error('‚ùå Analyze candidate error:', error)
    return NextResponse.json(
      { error: `Analysis failed: ${error instanceof Error ? error.message : String(error)}` },
      { status: 500 }
    )
  }
}
