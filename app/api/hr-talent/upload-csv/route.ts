import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { parse } from 'csv-parse/sync'
import OpenAI from 'openai'
import { put, del } from '@vercel/blob'
import { extractTextFromFile } from '@/lib/pdf-utils'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_KEY
})

interface GoogleFormRow {
  [key: string]: string
}

interface Candidate {
  id: string
  name: string
  email: string
  position: string
  cvUrl: string
  cvContent?: string
  submissionDate: string
  status: 'pending'
  formData?: any // Store the original Google Form data
}

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    const cvFile = formData.get('cvFile') as File
    const userId = formData.get('userId') as string
    const accessToken = formData.get('accessToken') as string
    const candidateName = formData.get('candidateName') as string
    const candidateEmail = formData.get('candidateEmail') as string
    const candidatePosition = formData.get('candidatePosition') as string

    console.log('üìä Processing CV upload for HR Talent:', {
      fileName: cvFile?.name,
      fileSize: cvFile?.size,
      userId,
      candidateName,
      candidateEmail
    })

    if (!cvFile || !userId || !accessToken) {
      return NextResponse.json(
        { error: 'Missing required parameters' },
        { status: 400 }
      )
    }

    // Validate file type - accept common CV formats
    const allowedExtensions = ['.pdf', '.doc', '.docx', '.txt', '.rtf']
    const fileExtension = cvFile.name.toLowerCase().substring(cvFile.name.lastIndexOf('.'))
    if (!allowedExtensions.includes(fileExtension)) {
      return NextResponse.json(
        { error: 'File must be a PDF, DOC, DOCX, TXT, or RTF' },
        { status: 400 }
      )
    }

    // Create authenticated Supabase client
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        global: {
          headers: {
            Authorization: `Bearer ${accessToken}`
          }
        }
      }
    )

    // Upload file to Vercel Blob
    let blobUrl = ''
    try {
      console.log(`üì§ Uploading file to Vercel Blob: ${cvFile.name}`)
      const blob = await put(cvFile.name, cvFile, {
        access: 'public',
      })
      blobUrl = blob.url
      console.log(`‚úÖ File uploaded to Vercel Blob: ${blobUrl}`)
    } catch (blobError) {
      console.error('‚ùå Vercel Blob upload error:', blobError)
      return NextResponse.json(
        { error: 'Failed to upload file to Vercel Blob' },
        { status: 500 }
      )
    }

    // Extract CV content from uploaded file
    let cvContent = ''
    try {
      console.log(`üìÑ Extracting CV content from uploaded file: ${cvFile.name}`)
      cvContent = await extractTextFromFile(cvFile)
      console.log(`‚úÖ CV content extracted (${cvContent?.length || 0} characters)`)
      
      // Debug: Show first 500 characters of CV content
      if (cvContent && cvContent.length > 0) {
        console.log(`üîç First 500 chars of CV content:`, cvContent.substring(0, 500))
      } else {
        console.log(`‚ùå CV content is empty or null`)
      }
    } catch (cvError) {
      console.warn(`‚ö†Ô∏è Failed to extract CV content:`, cvError)
      cvContent = `CV content could not be extracted: ${cvError instanceof Error ? cvError.message : 'Unknown error'}`
    }

    // Use provided candidate info or extract from CV
    let candidateInfo = {
      name: candidateName || 'Unknown Candidate',
      email: candidateEmail || 'no-email@example.com',
      position: candidatePosition || 'Sales Position'
    }

    // If no candidate info provided, try to extract from CV
    if (!candidateName && !candidateEmail && !candidatePosition && cvContent && !cvContent.includes('could not be extracted')) {
      try {
        console.log('ü§ñ Using ChatGPT to extract candidate information from CV...')
        const extractedInfo = await extractCandidateInfoFromCV(cvContent)
        candidateInfo = {
          name: extractedInfo.name !== 'Unknown Candidate' ? extractedInfo.name : candidateInfo.name,
          email: extractedInfo.email !== 'no-email@example.com' ? extractedInfo.email : candidateInfo.email,
          position: extractedInfo.position !== 'Unknown Position' ? extractedInfo.position : candidateInfo.position
        }
        console.log('‚úÖ Candidate information extracted:', candidateInfo)
      } catch (aiError) {
        console.warn('‚ö†Ô∏è Failed to extract candidate info with AI:', aiError)
      }
    }

    // Run the 3-prompt analysis to get score
    console.log('üß† Running analysis for candidate:', candidateInfo.name)
    const analysisResult = await runCandidateAnalysisWithDetails(cvContent, {}, candidateInfo)
    console.log(`üìä Candidate score: ${analysisResult.score}/10`)

    // Store analysis result for display
    const analysisResults = [{
      candidateName: candidateInfo.name,
      candidateEmail: candidateInfo.email,
      candidatePosition: candidateInfo.position,
      score: analysisResult.score,
      prompt1_response: analysisResult.prompt1_response,
      prompt2_response: analysisResult.prompt2_response,
      prompt3_response: analysisResult.prompt3_response,
      raw_content: analysisResult.raw_content
    }]

    // Only add to qualified candidates if score > 5
    let qualifiedCandidates: any[] = []
    if (analysisResult.score > 5) {
      const candidate = {
        id: crypto.randomUUID(),
        name: candidateInfo.name,
        email: candidateInfo.email,
        position: candidateInfo.position,
        cvUrl: cvFile.name,
        cvContent: cvContent,
        submissionDate: new Date().toISOString(),
        status: 'pending',
        score: analysisResult.score
      }
      
      console.log('üîç Created qualified candidate record:', {
        name: candidate.name,
        email: candidate.email,
        position: candidate.position,
        score: analysisResult.score
      })
      
      qualifiedCandidates.push(candidate)
      console.log('‚úÖ Qualified candidate added to list')
    } else {
      console.log(`‚ùå Candidate ${candidateInfo.name} scored ${analysisResult.score}/10 - below threshold (5)`)
    }

    console.log(`‚úÖ Processed 1 candidate, ${qualifiedCandidates.length} qualified (score > 5)`)

    // Store only qualified candidates in database
    let storedCandidates = []
    if (qualifiedCandidates.length > 0) {
      const { data: stored, error: dbError } = await supabase
        .from('hr_candidates')
        .insert(qualifiedCandidates.map(candidate => ({
          id: candidate.id,
          user_id: userId,
          agent_id: '9485f376-003f-489c-b038-2817c02ad15d', // HR Agent ID from your agents table
          name: candidate.name,
          email: candidate.email,
          position: candidate.position,
                     cv_file_url: blobUrl,
          cv_content: candidate.cvContent || null,
          form_data: null, // No form data for direct upload
          score: candidate.score, // Store the score
          status: 'completed', // Mark as completed since analysis is done
          analyzed_at: new Date().toISOString(),
          created_at: new Date().toISOString()
        })))
        .select()

      if (dbError) {
        console.error('‚ùå Database error:', dbError)
        return NextResponse.json(
          { error: 'Failed to store candidate' },
          { status: 500 }
        )
      }
      
      storedCandidates = stored || []
    }

         console.log('‚úÖ Candidates stored in database:', storedCandidates?.length)

     // Clean up: Delete file from Vercel Blob after processing
     try {
       console.log(`üóëÔ∏è Deleting file from Vercel Blob: ${blobUrl}`)
       await del(blobUrl)
       console.log(`‚úÖ File deleted from Vercel Blob successfully`)
     } catch (deleteError) {
       console.warn(`‚ö†Ô∏è Failed to delete file from Vercel Blob:`, deleteError)
       // Don't fail the request if cleanup fails
     }

     return NextResponse.json({
       success: true,
       candidates: qualifiedCandidates,
       analysisResults: analysisResults, // Return analysis results for display
       message: `Successfully processed 1 candidate, ${qualifiedCandidates.length} qualified (score > 5)`
     })

  } catch (error) {
    console.error('‚ùå CSV upload error:', error)
    return NextResponse.json(
      { error: `CSV processing failed: ${error instanceof Error ? error.message : String(error)}` },
      { status: 500 }
    )
  }
}

// Function to extract CV content from uploaded file (now using utility)
async function extractCVContentFromFile(file: File): Promise<string> {
  return extractTextFromFile(file)
}

// Function to extract CV content from various file types (kept for backward compatibility)
async function extractCVContent(cvUrl: string): Promise<string> {
  try {
    console.log('üîç Extracting CV content from URL:', cvUrl)
    
    // Handle Google Drive URLs
    if (cvUrl.includes('drive.google.com')) {
      return await extractFromGoogleDrive(cvUrl)
    }
    
    // Handle direct file URLs
    if (cvUrl.startsWith('http')) {
      return await extractFromDirectURL(cvUrl)
    }
    
    throw new Error('Unsupported URL format')
    
  } catch (error) {
    console.error('‚ùå CV extraction error:', error)
    throw error
  }
}

// Extract content from Google Drive URLs
async function extractFromGoogleDrive(driveUrl: string): Promise<string> {
  try {
    // Convert Google Drive sharing URL to direct download URL
    const fileId = extractGoogleDriveFileId(driveUrl)
    if (!fileId) {
      throw new Error('Could not extract file ID from Google Drive URL')
    }
    
    // Try to get file content using Google Drive API or direct download
    const directUrl = `https://drive.google.com/uc?export=download&id=${fileId}`
    
    console.log('üì• Downloading from Google Drive:', directUrl)
    
    const response = await fetch(directUrl, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    })
    
    if (!response.ok) {
      throw new Error(`Failed to download file: ${response.status}`)
    }
    
    const buffer = await response.arrayBuffer()
    const text = new TextDecoder('utf-8').decode(buffer)
    
    // If it's a binary file (PDF, DOCX), we'll need to handle it differently
    if (text.includes('<!DOCTYPE html>') || text.includes('<html>') || text.includes('accounts.google.com')) {
      // This might be a Google Drive error page or HTML
      console.log(`‚ùå Received HTML instead of file content. HTML preview:`, text.substring(0, 500))
      throw new Error('Google Drive file is restricted or requires authentication. Please make the file publicly accessible or provide a direct download link.')
    }
    
    console.log(`‚úÖ Successfully extracted text content. Preview:`, text.substring(0, 200))
    return text
    
  } catch (error) {
    console.error('‚ùå Google Drive extraction error:', error)
    throw error
  }
}

// Extract content from direct URLs
async function extractFromDirectURL(url: string): Promise<string> {
  try {
    console.log('üì• Downloading from direct URL:', url)
    
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    })
    
    if (!response.ok) {
      throw new Error(`Failed to download file: ${response.status}`)
    }
    
    const buffer = await response.arrayBuffer()
    const text = new TextDecoder('utf-8').decode(buffer)
    
    return text
    
  } catch (error) {
    console.error('‚ùå Direct URL extraction error:', error)
    throw error
  }
}

// Extract Google Drive file ID from URL
function extractGoogleDriveFileId(url: string): string | null {
  const patterns = [
    /\/file\/d\/([a-zA-Z0-9-_]+)/,
    /id=([a-zA-Z0-9-_]+)/,
    /\/d\/([a-zA-Z0-9-_]+)/,
    /open\?usp=forms_web&id=([a-zA-Z0-9-_]+)/, // Handle Google Forms format
    /id=([a-zA-Z0-9-_]+)/ // General ID pattern
  ]
  
  for (const pattern of patterns) {
    const match = url.match(pattern)
    if (match) {
      return match[1]
    }
  }
  
  return null
}

// Function to extract candidate information from CV content using ChatGPT
async function extractCandidateInfoFromCV(cvContent: string): Promise<{name: string, email: string, position: string}> {
  try {
    console.log('ü§ñ Sending CV content to ChatGPT for analysis...')
    
    // Truncate CV content to fit within token limits for candidate info extraction
    const maxCvLengthForInfo = 4000 // ~1000 tokens (4 chars per token average)
    const truncatedCvContent = cvContent.length > maxCvLengthForInfo 
      ? cvContent.substring(0, maxCvLengthForInfo) + '\n\n[CV content truncated for info extraction]'
      : cvContent
    
    console.log(`üìÑ CV content length for info extraction: ${cvContent.length} chars, truncated to: ${truncatedCvContent.length} chars`)
    console.log(`üîç Truncated CV content for ChatGPT:`, truncatedCvContent.substring(0, 200) + '...')
    
    const prompt = `
      Analisa o seguinte conte√∫do de CV e extrai as seguintes informa√ß√µes:
      
      CONTE√öDO DO CV:
      ${truncatedCvContent}
      
      Por favor, extrai e retorna APENAS um objeto JSON com a seguinte estrutura:
      {
        "name": "Nome completo da pessoa",
        "email": "Email da pessoa",
        "position": "Posi√ß√£o/cargo que est√° a candidatar-se"
      }
      
      Regras importantes:
      - Se n√£o conseguires encontrar alguma informa√ß√£o, usa valores padr√£o:
        - name: "Unknown Candidate"
        - email: "no-email@example.com" 
        - position: "Unknown Position"
      - Retorna APENAS o JSON, sem texto adicional
      - Certifica-te de que o JSON √© v√°lido
    `
    
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "√âs um assistente especializado em extrair informa√ß√µes de CVs. Forneces apenas JSON v√°lido como resposta."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.1,
      max_tokens: 500
    })
    
    const responseContent = completion.choices[0]?.message?.content
    if (!responseContent) {
      throw new Error('No response from ChatGPT')
    }
    
    console.log(`ü§ñ ChatGPT response for candidate info:`, responseContent)
    
    // Try to parse the JSON response
    try {
      const candidateInfo = JSON.parse(responseContent)
      console.log(`‚úÖ Parsed candidate info:`, candidateInfo)
      return {
        name: candidateInfo.name || 'Unknown Candidate',
        email: candidateInfo.email || 'no-email@example.com',
        position: candidateInfo.position || 'Unknown Position'
      }
    } catch (parseError) {
      console.warn('‚ö†Ô∏è Failed to parse ChatGPT response as JSON:', responseContent)
      return {
        name: 'Unknown Candidate',
        email: 'no-email@example.com',
        position: 'Unknown Position'
      }
    }
    
  } catch (error) {
    console.error('‚ùå Error extracting candidate info with ChatGPT:', error)
    return {
      name: 'Unknown Candidate',
      email: 'no-email@example.com',
      position: 'Unknown Position'
    }
  }
}

// Function to run the 3-prompt analysis and return score
async function runCandidateAnalysis(cvContent: string, formData: any, candidateInfo: any): Promise<number> {
  try {
    // Truncate CV content to fit within token limits
    const maxCvLength = 8000 // ~2000 tokens (4 chars per token average)
    const truncatedCvContent = cvContent.length > maxCvLength 
      ? cvContent.substring(0, maxCvLength) + '\n\n[CV content truncated due to length]'
      : cvContent

    // Build candidate information from form data
    let candidateInfoText = ''
    if (formData) {
      candidateInfoText = `
Informa√ß√µes do Candidato:
- Nome: ${candidateInfo.name}
- Email: ${candidateInfo.email}
- Idade: ${formData.Idade || 'N√£o especificada'}
- Resid√™ncia: ${formData.Resid√™ncia || 'N√£o especificada'}
- Regime de trabalho pretendido: ${formData.Regime || 'N√£o especificado'}
- J√° fez vendas diretas: ${formData['J√° fizeste vendas diretas?'] || 'N√£o especificado'}
- Anos de experi√™ncia em vendas: ${formData['Se sim, quantos anos tens de experi√™ncia em vendas diretas?'] || '0'}
- Setores de experi√™ncia: ${formData['Setores em que tem experi√™ncia'] || 'N√£o especificado'}
- L√≠nguas faladas: ${formData['L√≠nguas faladas'] || 'N√£o especificado'}
- Confian√ßa na habilidade de vender (0-10): ${formData['De 0-10, o qu√£o confiante est√°s na tua habilidade de vendedor?'] || 'N√£o especificado'}
- Facilidade com feedback negativo (0-10): ${formData['De 0-10, o qu√£o f√°cil lidas com feedback negativo?'] || 'N√£o especificado'}
- Confian√ßa sob press√£o (0-10): ${formData['De 0-10, o qu√£o confiante trabalhas sob press√£o?'] || 'N√£o especificado'}
- Disponibilidade imediata: ${formData['Tens disponibilidade imediata?'] || 'N√£o especificado'}
`
    }

    // Prompt 1: Main scoring evaluation
    const prompt1 = `
Como assistente de recrutamento especializado, a tua fun√ß√£o √© avaliar candidatos para posi√ß√µes comerciais para empresas parceiras. 
Segue este processo estruturado de avalia√ß√£o:

CRIT√âRIOS ELIMINAT√ìRIOS Primeiro, verifique se o candidato atende aos requisitos m√≠nimos de cada empresa. Se qualquer crit√©rio eliminat√≥rio n√£o for atendido, atribua pontua√ß√£o 0 e encerre a avalia√ß√£o para aquela empresa.

Comopi:
Idade: 20-45 anos
Carta de condu√ß√£o obrigat√≥ria
Disponibilidade para desloca√ß√µes frequentes
Conhecimento em design e setor

MoBrand:
Ingl√™s fluente obrigat√≥rio
Experi√™ncia B2B comprovada
Disponibilidade hor√°rio 14:00-22:00 GMT
Documenta√ß√£o portuguesa regularizada

Lugotech:
Localiza√ß√£o: Guimar√£es ou arredores
Disponibilidade presencial segundas-feiras
Experi√™ncia em vendas ou call center

Grafislab:
Ingl√™s fluente
Franc√™s desej√°vel
Disponibilidade regime h√≠brido Ermesinde
Idade: 25-35 anos

Mariana Arga e Lima:
Experi√™ncia em vendas consultivas
Capacidade comprovada de gest√£o de ciclo comercial completo
Disponibilidade para trabalho remoto

Mush:
Idade: 23-38 anos
Forma√ß√£o ou experi√™ncia em Marketing
Localiza√ß√£o: Porto ou arredores
Disponibilidade regime h√≠brido

Slide Lab:
Idade: 22-33 anos
Experi√™ncia comercial pr√©via (2-3 anos)
Ingl√™s fluente
Localiza√ß√£o: Lisboa

Fashion Details:
Idade: <35 anos
Conhecimento setor moda
Carta de condu√ß√£o
Localiza√ß√£o: Trofa

MagikEvolution:
Idade: 22-30 anos
Localiza√ß√£o: Trofa/Maia/Santo Tirso/Vizela/Famalic√£o
Disponibilidade regime h√≠brido

Maria Costa e Maia:
Experi√™ncia m√≠nima 2 anos em vendas
Resid√™ncia Porto ou Lisboa
Disponibilidade regime h√≠brido
Capacidade gest√£o 10 reuni√µes/dia

SISTEMA DE PONTUA√á√ÉO (Para candidatos que passaram os crit√©rios eliminat√≥rios)
C√ÅLCULO DA PONTUA√á√ÉO FINAL:
Para cada empresa, calcular:

M√©dia ponderada dos crit√©rios com os seguintes pesos:
Experi√™ncia em Vendas: 35%
Localiza√ß√£o e Disponibilidade: 25%
Compet√™ncias Lingu√≠sticas: 20%
Soft Skills: 10%
Expectativa Salarial: 10%

Multiplicar por fatores espec√≠ficos apenas se todos os requisitos m√≠nimos forem atendidos:
Match de setor de interesse: x1.1
Match de regime de trabalho: x1.1
Match geogr√°fico perfeito: x1.1

Se o candidato tiver 0 anos de experi√™ncia, a pontua√ß√£o final n√£o pode exceder 3.0.
Se o candidato tiver menos de 1 ano de experi√™ncia, a pontua√ß√£o final n√£o pode exceder 5.0.

Como output, dar um rating de 0-10, apenas o n√∫mero final.

FATORES MULTIPLICADORES Aplicar apenas se pontua√ß√£o base >5:
Match perfeito de setor: x1.2
Match perfeito de localiza√ß√£o: x1.1
Match perfeito de regime de trabalho: x1.1

LIMITADORES
0 anos de experi√™ncia: pontua√ß√£o m√°xima 3.0
Menos de 1 ano de experi√™ncia: pontua√ß√£o m√°xima 5.0
N√£o atendimento de qualquer crit√©rio eliminat√≥rio: pontua√ß√£o 0

OUTPUT Fornecer:
Pontua√ß√£o final (0-10, uma casa decimal)
As tr√™s empresas com maior pontua√ß√£o
Principais pontos fortes do candidato
Principais pontos de aten√ß√£o
Mesmo com informa√ß√µes incompletas, fornece sempre uma avalia√ß√£o baseada nos dados dispon√≠veis, indicando quais crit√©rios n√£o puderam ser avaliados

Eis o candidato que estamos a avaliar:

${candidateInfoText}

CV Content:
${truncatedCvContent}

Analisa este candidato baseado nas informa√ß√µes do formul√°rio e conte√∫do do CV e retorna apenas um n√∫mero de 0-10 com uma casa decimal (ex: 7.5).
`

    // Execute the analysis
    console.log('ü§ñ Executing Prompt 1: Main scoring evaluation...')
    const completion1 = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "√âs um especialista em recrutamento para posi√ß√µes comerciais. Avalias candidatos para 10 empresas parceiras seguindo crit√©rios espec√≠ficos. Retornas apenas um n√∫mero de 0-10."
        },
        {
          role: "user",
          content: prompt1
        }
      ],
      temperature: 0.1,
      max_tokens: 100
    })

    const scoreResponse = completion1.choices[0]?.message?.content
    if (!scoreResponse) {
      throw new Error('No score response received from OpenAI')
    }

    // Extract score from response (should be just a number)
    const scoreMatch = scoreResponse.match(/(\d+\.?\d*)/)
    const score = scoreMatch ? parseFloat(scoreMatch[1]) : 5.0
    console.log(`üìä Score extracted: ${score}`)

    return score

  } catch (error) {
    console.error('‚ùå Error running candidate analysis:', error)
    return 0 // Return 0 if analysis fails
  }
}

// Function to run the 3-prompt analysis and return detailed results
async function runCandidateAnalysisWithDetails(cvContent: string, formData: any, candidateInfo: any): Promise<{
  score: number;
  prompt1_response: string;
  prompt2_response: string;
  prompt3_response: string;
  raw_content: string;
}> {
  try {
    // Truncate CV content to fit within token limits
    const maxCvLength = 8000 // ~2000 tokens (4 chars per token average)
    const truncatedCvContent = cvContent.length > maxCvLength 
      ? cvContent.substring(0, maxCvLength) + '\n\n[CV content truncated due to length]'
      : cvContent

    // Build candidate information from form data
    let candidateInfoText = ''
    if (formData) {
      candidateInfoText = `
Informa√ß√µes do Candidato:
- Nome: ${candidateInfo.name}
- Email: ${candidateInfo.email}
- Idade: ${formData.Idade || 'N√£o especificada'}
- Resid√™ncia: ${formData.Resid√™ncia || 'N√£o especificada'}
- Regime de trabalho pretendido: ${formData.Regime || 'N√£o especificado'}
- J√° fez vendas diretas: ${formData['J√° fizeste vendas diretas?'] || 'N√£o especificado'}
- Anos de experi√™ncia em vendas: ${formData['Se sim, quantos anos tens de experi√™ncia em vendas diretas?'] || '0'}
- Setores de experi√™ncia: ${formData['Setores em que tem experi√™ncia'] || 'N√£o especificado'}
- L√≠nguas faladas: ${formData['L√≠nguas faladas'] || 'N√£o especificado'}
- Confian√ßa na habilidade de vender (0-10): ${formData['De 0-10, o qu√£o confiante est√°s na tua habilidade de vendedor?'] || 'N√£o especificado'}
- Facilidade com feedback negativo (0-10): ${formData['De 0-10, o qu√£o f√°cil lidas com feedback negativo?'] || 'N√£o especificado'}
- Confian√ßa sob press√£o (0-10): ${formData['De 0-10, o qu√£o confiante trabalhas sob press√£o?'] || 'N√£o especificado'}
- Disponibilidade imediata: ${formData['Tens disponibilidade imediata?'] || 'N√£o especificado'}
`
    }

    // Prompt 1: Main scoring evaluation
    const prompt1 = `
Como assistente de recrutamento especializado, a tua fun√ß√£o √© avaliar candidatos para posi√ß√µes comerciais para empresas parceiras. 
Segue este processo estruturado de avalia√ß√£o:

CRIT√âRIOS ELIMINAT√ìRIOS Primeiro, verifique se o candidato atende aos requisitos m√≠nimos de cada empresa. Se qualquer crit√©rio eliminat√≥rio n√£o for atendido, atribua pontua√ß√£o 0 e encerre a avalia√ß√£o para aquela empresa.

Comopi:
Idade: 20-45 anos
Carta de condu√ß√£o obrigat√≥ria
Disponibilidade para desloca√ß√µes frequentes
Conhecimento em design e setor

MoBrand:
Ingl√™s fluente obrigat√≥rio
Experi√™ncia B2B comprovada
Disponibilidade hor√°rio 14:00-22:00 GMT
Documenta√ß√£o portuguesa regularizada

Lugotech:
Localiza√ß√£o: Guimar√£es ou arredores
Disponibilidade presencial segundas-feiras
Experi√™ncia em vendas ou call center

Grafislab:
Ingl√™s fluente
Franc√™s desej√°vel
Disponibilidade regime h√≠brido Ermesinde
Idade: 25-35 anos

Mariana Arga e Lima:
Experi√™ncia em vendas consultivas
Capacidade comprovada de gest√£o de ciclo comercial completo
Disponibilidade para trabalho remoto

Mush:
Idade: 23-38 anos
Forma√ß√£o ou experi√™ncia em Marketing
Localiza√ß√£o: Porto ou arredores
Disponibilidade regime h√≠brido

Slide Lab:
Idade: 22-33 anos
Experi√™ncia comercial pr√©via (2-3 anos)
Ingl√™s fluente
Localiza√ß√£o: Lisboa

Fashion Details:
Idade: <35 anos
Conhecimento setor moda
Carta de condu√ß√£o
Localiza√ß√£o: Trofa

MagikEvolution:
Idade: 22-30 anos
Localiza√ß√£o: Trofa/Maia/Santo Tirso/Vizela/Famalic√£o
Disponibilidade regime h√≠brido

Maria Costa e Maia:
Experi√™ncia m√≠nima 2 anos em vendas
Resid√™ncia Porto ou Lisboa
Disponibilidade regime h√≠brido
Capacidade gest√£o 10 reuni√µes/dia

SISTEMA DE PONTUA√á√ÉO (Para candidatos que passaram os crit√©rios eliminat√≥rios)
C√ÅLCULO DA PONTUA√á√ÉO FINAL:
Para cada empresa, calcular:

M√©dia ponderada dos crit√©rios com os seguintes pesos:
Experi√™ncia em Vendas: 35%
Localiza√ß√£o e Disponibilidade: 25%
Compet√™ncias Lingu√≠sticas: 20%
Soft Skills: 10%
Expectativa Salarial: 10%

Multiplicar por fatores espec√≠ficos apenas se todos os requisitos m√≠nimos forem atendidos:
Match de setor de interesse: x1.1
Match de regime de trabalho: x1.1
Match geogr√°fico perfeito: x1.1

Se o candidato tiver 0 anos de experi√™ncia, a pontua√ß√£o final n√£o pode exceder 3.0.
Se o candidato tiver menos de 1 ano de experi√™ncia, a pontua√ß√£o final n√£o pode exceder 5.0.

Como output, dar um rating de 0-10, apenas o n√∫mero final.

FATORES MULTIPLICADORES Aplicar apenas se pontua√ß√£o base >5:
Match perfeito de setor: x1.2
Match perfeito de localiza√ß√£o: x1.1
Match perfeito de regime de trabalho: x1.1

LIMITADORES
0 anos de experi√™ncia: pontua√ß√£o m√°xima 3.0
Menos de 1 ano de experi√™ncia: pontua√ß√£o m√°xima 5.0
N√£o atendimento de qualquer crit√©rio eliminat√≥rio: pontua√ß√£o 0

OUTPUT Fornecer:
Pontua√ß√£o final (0-10, uma casa decimal)
As tr√™s empresas com maior pontua√ß√£o
Principais pontos fortes do candidato
Principais pontos de aten√ß√£o
Mesmo com informa√ß√µes incompletas, fornece sempre uma avalia√ß√£o baseada nos dados dispon√≠veis, indicando quais crit√©rios n√£o puderam ser avaliados

Eis o candidato que estamos a avaliar:

${candidateInfoText}

CV Content:
${truncatedCvContent}

Analisa este candidato baseado nas informa√ß√µes do formul√°rio e conte√∫do do CV e retorna apenas um n√∫mero de 0-10 com uma casa decimal (ex: 7.5).
`

    // Execute the analysis
    console.log('ü§ñ Executing Prompt 1: Main scoring evaluation...')
    const completion1 = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "√âs um especialista em recrutamento para posi√ß√µes comerciais. Avalias candidatos para 10 empresas parceiras seguindo crit√©rios espec√≠ficos. Retornas apenas um n√∫mero de 0-10."
        },
        {
          role: "user",
          content: prompt1
        }
      ],
      temperature: 0.1,
      max_tokens: 100
    })

    const scoreResponse = completion1.choices[0]?.message?.content
    if (!scoreResponse) {
      throw new Error('No score response received from OpenAI')
    }

    // Extract score from response (should be just a number)
    const scoreMatch = scoreResponse.match(/(\d+\.?\d*)/)
    const score = scoreMatch ? parseFloat(scoreMatch[1]) : 5.0
    console.log(`üìä Score extracted: ${score}`)

    // Prompt 2: Strengths analysis
    console.log('ü§ñ Executing Prompt 2: Strengths analysis...')
    const prompt2 = `
Preciso que analises esta resposta "${scoreResponse}" e o candidato em questao e me digas em 15 palavras os pontos fortes dele.

3 no m√°ximo.

Output s√≥ os pontes fortes.
`
    
    const completion2 = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "√âs um especialista em an√°lise de candidatos. Identificas pontos fortes de forma concisa."
        },
        {
          role: "user",
          content: prompt2
        }
      ],
      temperature: 0.3,
      max_tokens: 100
    })

    const strengthsResponse = completion2.choices[0]?.message?.content || 'Pontos fortes n√£o identificados'

    // Prompt 3: Weaknesses analysis
    console.log('ü§ñ Executing Prompt 3: Weaknesses analysis...')
    const prompt3 = `
Preciso que analises esta resposta "${scoreResponse}" e o candidato em questao e me digas em 15 palavras os pontos a ter em aten√ß√£o dele.

3 no m√°ximo.

Output s√≥ os pontes a ter em aten√ßao.
`
    
    const completion3 = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: "√âs um especialista em an√°lise de candidatos. Identificas pontos de aten√ß√£o de forma concisa."
        },
        {
          role: "user",
          content: prompt3
        }
      ],
      temperature: 0.3,
      max_tokens: 100
    })

    const weaknessesResponse = completion3.choices[0]?.message?.content || 'Pontos de aten√ß√£o n√£o identificados'

    return {
      score: score,
      prompt1_response: scoreResponse,
      prompt2_response: strengthsResponse,
      prompt3_response: weaknessesResponse,
      raw_content: `Score: ${score}/10\nStrengths: ${strengthsResponse}\nWeaknesses: ${weaknessesResponse}`
    }

  } catch (error) {
    console.error('‚ùå Error running candidate analysis with details:', error)
    return {
      score: 0,
      prompt1_response: 'Analysis failed',
      prompt2_response: 'Analysis failed',
      prompt3_response: 'Analysis failed',
      raw_content: 'Analysis failed'
    }
  }
}
