import { NextRequest, NextResponse } from 'next/server'
import { getKnowledgeForCallType } from '@/lib/sales-analyst-knowledge'
import { enhancePromptWithCallTypeKnowledge } from '@/lib/comprehensive-prompts'

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const callType = searchParams.get('callType') || 'Chamada Fria'
    
    console.log(`\nüß™ ===== TESTING PDF PARSING WORKFLOW =====`)
    console.log(`üìã Call Type: ${callType}`)
    
    // Step 1: Test knowledge fetching
    console.log(`\nüì• Step 1: Fetching knowledge for ${callType}...`)
    const knowledge = await getKnowledgeForCallType(callType)
    
    console.log(`üìä Knowledge Results:`)
    console.log(`   - Has Knowledge: ${knowledge && knowledge.trim().length > 0}`)
    console.log(`   - Knowledge Length: ${knowledge ? knowledge.length : 0} characters`)
    
    if (knowledge && knowledge.length > 0) {
      console.log(`   - Knowledge Preview: ${knowledge.substring(0, 300)}...`)
    }
    
    // Step 2: Test prompt enhancement
    console.log(`\nüîß Step 2: Testing prompt enhancement...`)
    const basePrompt = `Identifica e resume os pontos fortes da reuni√£o de vendas com base na transcri√ß√£o fornecida.

IMPORTANTE: Antes de come√ßar a an√°lise, identifica claramente quem √© o VENDEDOR/COMERCIAL na transcri√ß√£o. O comercial √© normalmente a pessoa que:
- Apresenta produtos/servi√ßos
- Faz perguntas sobre necessidades do cliente
- Tenta fechar a venda
- Tem um papel ativo de vendas

A tua an√°lise deve focar APENAS no desempenho do VENDEDOR identificado.

CR√çTICO: Na tua resposta, NUNCA uses "Speaker A" ou "Speaker B". Sempre refere-te ao comercial como "o comercial" e ao cliente como "o cliente". NUNCA combines "comercial" com "Speaker A/B" - usa APENAS "o comercial".

REGRAS CR√çTICAS PARA IDENTIFICA√á√ÉO DE PONTOS FORTES:

1. N√ÉO consideres como pontos fortes:
   - Partilha de ecr√£ - √© uma ferramenta essencial, n√£o um ponto forte
   - A√ß√µes b√°sicas como "dizer ol√°" ou "apresentar-se"
   - T√©cnicas padr√£o que qualquer comercial deveria fazer
   - Ferramentas ou recursos utilizados (como partilhar ecr√£)

2. FOCA em pontos fortes reais:
   - Perguntas estrat√©gicas e bem formuladas
   - Escuta ativa e empatia genu√≠na
   - Apresenta√ß√£o personalizada da solu√ß√£o
   - Gest√£o eficaz de obje√ß√µes
   - Cria√ß√£o de rapport e confian√ßa
   - Estrutura clara e controlo da reuni√£o
   - Fechamento eficaz com pr√≥ximos passos claros

O feedback deve ser objetivo, conciso (m√°x. 140 palavras) e focado na melhoria cont√≠nua.  
Deve responder sempre em portugu√™s de Lisboa.  
Cada ponto forte deve ter um Momento exato (Timestamp) e uma Cita√ß√£o Direta da transcri√ß√£o.  
Se uma cita√ß√£o contiver erros gramaticais, palavras truncadas ou frases incompletas, corrige-a para garantir um portugu√™s fluente e natural, mantendo o significado original.

REGRAS DE COMUNICA√á√ÉO:
Todas as tuas respostas devem ser exclusivamente em portugu√™s de Portugal (especificamente de Lisboa), respeitando as seguintes regras:  

1. Tratamento: Utiliza "tu" em vez de "voc√™" para tratamento informal e "o senhor/a senhora" para tratamento formal.  
2. Pronomes e Conjuga√ß√µes: Utiliza "tu fazes" em vez de "voc√™ faz", "te/ti/contigo" em vez de formas com "voc√™", e a 2¬™ pessoa do singular nas conjuga√ß√µes verbais.  
3. Evita ger√∫ndios: Utiliza "estou a fazer" em vez de "estou fazendo", "estamos a analisar" em vez de "estamos analisando".  
4. Coloca√ß√£o dos pronomes cl√≠ticos: Prefere a √™nclise na maioria dos contextos ("Disse-me" em vez de "Me disse").  
5. Preserva os sons e sotaque lisboeta, que tende a reduzir as vogais √°tonas.  
6. Utiliza sempre o pret√©rito perfeito simples em vez do composto em situa√ß√µes de a√ß√µes conclu√≠das ("Eu comi" em vez de "Eu tenho comido").  
7. SE FOR O COMERCIAL A FALAR FALA SEMPRE NA TERCEIRA PESSOA DO SINGULAR, POR EXEMPLO: "TU FALASTE", "TU INICIASTE" ETC

√â ABSOLUTAMENTE ESSENCIAL que todas as respostas sigam estas regras, sem exce√ß√£o. Em caso de d√∫vida, opta sempre pela forma utilizada em Portugal, especificamente em Lisboa.

Estrutura da Resposta (formato de lista com bullets):

- **Boa Abordagem Inicial**: Momento em que a introdu√ß√£o foi clara, envolvente e estabeleceu rapport com o cliente. Timestamp: [Momento exato] "[Cita√ß√£o direta retirada da transcri√ß√£o]"

- **Identifica√ß√£o Eficaz de Necessidades**: Quando o comercial fez perguntas relevantes que ajudaram a entender as necessidades do cliente. Timestamp: [Momento exato] "[Cita√ß√£o direta retirada da transcri√ß√£o]"

- **Apresenta√ß√£o Clara de Solu√ß√µes**: Onde o comercial explicou de forma convincente como o produto ou servi√ßo resolve o problema do cliente. Timestamp: [Momento exato] "[Cita√ß√£o direta retirada da transcri√ß√£o]"

- **Gest√£o de Obje√ß√µes**: Situa√ß√µes em que o comercial lidou bem com d√∫vidas ou hesita√ß√µes do cliente. Timestamp: [Momento exato] "[Cita√ß√£o direta retirada da transcri√ß√£o]"

- **Conclus√£o Positiva**: Momentos em que o comercial avan√ßou eficazmente para o pr√≥ximo passo ou para o fecho da venda. Timestamp: [Momento exato] "[Cita√ß√£o direta retirada da transcri√ß√£o]"

Instru√ß√µes Cr√≠ticas:
- USA markdown para criar a lista com bullets (formato: - **T√≠tulo**: texto...)
- Escreve sempre em portugu√™s de Lisboa.
- Inclui cita√ß√£o direta do transcript para cada ponto forte, com o timestamp exato.
- USA APENAS o formato de bullet list especificado acima.
- N√ÉO incluas t√≠tulos como "Pontos Fortes da Reuni√£o" - come√ßa diretamente com os pontos individuais em formato de lista.

Transcri√ß√£o para an√°lise:
teste`

    const enhancedPrompt = await enhancePromptWithCallTypeKnowledge(basePrompt, callType)
    
    console.log(`üìä Prompt Enhancement Results:`)
    console.log(`   - Base Prompt Length: ${basePrompt.length} characters`)
    console.log(`   - Enhanced Prompt Length: ${enhancedPrompt.length} characters`)
    console.log(`   - Enhancement Ratio: ${(enhancedPrompt.length / basePrompt.length).toFixed(2)}x`)
    
    // Step 3: Show the final prompt structure
    console.log(`\nüìù Step 3: Final Enhanced Prompt Structure:`)
    const knowledgeSection = enhancedPrompt.substring(0, enhancedPrompt.indexOf('Identifica e resume'))
    const analysisSection = enhancedPrompt.substring(enhancedPrompt.indexOf('Identifica e resume'))
    
    console.log(`   - Knowledge Section Length: ${knowledgeSection.length} characters`)
    console.log(`   - Analysis Section Length: ${analysisSection.length} characters`)
    
    // Return comprehensive test results
    return NextResponse.json({
      success: true,
      testResults: {
        callType,
        timestamp: new Date().toISOString(),
        knowledgeFetching: {
          hasKnowledge: knowledge && knowledge.trim().length > 0,
          knowledgeLength: knowledge ? knowledge.length : 0,
          knowledgePreview: knowledge ? knowledge.substring(0, 500) : null,
          knowledgeSource: knowledge && knowledge.includes('CONHECIMENTO ESPEC√çFICO') ? 'blob-storage' : 'local-fallback'
        },
        promptEnhancement: {
          basePromptLength: basePrompt.length,
          enhancedPromptLength: enhancedPrompt.length,
          enhancementRatio: enhancedPrompt.length / basePrompt.length,
          knowledgeSectionLength: knowledgeSection.length,
          analysisSectionLength: analysisSection.length
        },
        finalPrompt: {
          knowledgeSection: knowledgeSection,
          analysisSection: analysisSection,
          fullPrompt: enhancedPrompt
        }
      }
    })
    
  } catch (error) {
    console.error('‚ùå Test workflow failed:', error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { status: 500 })
  }
}
